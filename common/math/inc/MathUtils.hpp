#ifndef _CBTEK_COMMON_MATH_MATH_UTILS
#define _CBTEK_COMMON_MATH_MATH_UTILS

#include "Vector3.hpp"
#include "Point.hpp"

namespace cbtek {
namespace common {
namespace math {
namespace MathUtils {

namespace constants
{
    static const double SIN_TABLE[360]={0.000000,0.017452,0.034899,0.052336,0.069756,0.087156,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.342020,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.453990,0.469472,0.484810,0.500000,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.629320,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.719340,0.731354,0.743145,0.754710,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.874620,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.933580,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.974370,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.998630,0.999391,0.999848,1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469472,0.453991,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452,0.000000,-0.017452,-0.034899,-0.052336,-0.069756,-0.087156,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.453990,-0.469472,-0.484810,-0.500000,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.629320,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354,-0.743145,-0.754710,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630,-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.933580,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.874620,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.754710,-0.743145,-0.731354,-0.719340,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484810,-0.469472,-0.453991,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156,-0.069756,-0.052336,-0.034900,-0.017452};
    static const double COS_TABLE[360]={1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469472,0.453991,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452,0.000000,-0.017452,-0.034899,-0.052336,-0.069756,-0.087156,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.453990,-0.469472,-0.484810,-0.500000,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.629320,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354,-0.743145,-0.754710,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630,-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.933580,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.874620,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.754710,-0.743145,-0.731354,-0.719340,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484810,-0.469472,-0.453991,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156,-0.069756,-0.052336,-0.034899,-0.017452,-0.000000,0.017452,0.034899,0.052336,0.069756,0.087156,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.342020,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.453990,0.469472,0.484810,0.500000,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.629320,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.719340,0.731354,0.743145,0.754710,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.874620,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.933580,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.974370,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.998630,0.999391,0.999848};
    static const double TAN_TABLE[360]={0.000000,0.017455,0.034921,0.052408,0.069927,0.087489,0.105104,0.122785,0.140541,0.158384,0.176327,0.194380,0.212557,0.230868,0.249328,0.267949,0.286745,0.305731,0.324920,0.344328,0.363970,0.383864,0.404026,0.424475,0.445229,0.466308,0.487733,0.509525,0.531709,0.554309,0.577350,0.600861,0.624869,0.649408,0.674509,0.700208,0.726543,0.753554,0.781286,0.809784,0.839100,0.869287,0.900404,0.932515,0.965689,1.000000,1.035530,1.072369,1.110613,1.150368,1.191754,1.234897,1.279942,1.327045,1.376382,1.428148,1.482561,1.539865,1.600335,1.664279,1.732051,1.804048,1.880726,1.962611,2.050304,2.144507,2.246037,2.355852,2.475087,2.605089,2.747477,2.904211,3.077684,3.270853,3.487414,3.732051,4.010781,4.331476,4.704630,5.144554,5.671282,6.313751,7.115370,8.144346,9.514364,11.430052,14.300666,19.081136,28.636253,57.289959,1117446902.711160,-57.289965,-28.636254,-19.081137,-14.300666,-11.430052,-9.514365,-8.144346,-7.115370,-6.313752,-5.671282,-5.144554,-4.704630,-4.331476,-4.010781,-3.732051,-3.487414,-3.270853,-3.077684,-2.904211,-2.747477,-2.605089,-2.475087,-2.355852,-2.246037,-2.144507,-2.050304,-1.962611,-1.880726,-1.804048,-1.732051,-1.664279,-1.600335,-1.539865,-1.482561,-1.428148,-1.376382,-1.327045,-1.279942,-1.234897,-1.191754,-1.150368,-1.110613,-1.072369,-1.035530,-1.000000,-0.965689,-0.932515,-0.900404,-0.869287,-0.839100,-0.809784,-0.781286,-0.753554,-0.726543,-0.700208,-0.674509,-0.649408,-0.624869,-0.600861,-0.577350,-0.554309,-0.531709,-0.509525,-0.487733,-0.466308,-0.445229,-0.424475,-0.404026,-0.383864,-0.363970,-0.344328,-0.324920,-0.305731,-0.286745,-0.267949,-0.249328,-0.230868,-0.212557,-0.194380,-0.176327,-0.158384,-0.140541,-0.122785,-0.105104,-0.087489,-0.069927,-0.052408,-0.034921,-0.017455,-0.000000,0.017455,0.034921,0.052408,0.069927,0.087489,0.105104,0.122785,0.140541,0.158384,0.176327,0.194380,0.212557,0.230868,0.249328,0.267949,0.286745,0.305731,0.324920,0.344328,0.363970,0.383864,0.404026,0.424475,0.445229,0.466308,0.487733,0.509525,0.531709,0.554309,0.577350,0.600861,0.624869,0.649408,0.674509,0.700208,0.726543,0.753554,0.781286,0.809784,0.839100,0.869287,0.900404,0.932515,0.965689,1.000000,1.035530,1.072369,1.110613,1.150368,1.191754,1.234897,1.279942,1.327045,1.376382,1.428148,1.482561,1.539865,1.600335,1.664279,1.732051,1.804048,1.880726,1.962610,2.050304,2.144507,2.246037,2.355852,2.475087,2.605089,2.747477,2.904211,3.077684,3.270853,3.487414,3.732051,4.010781,4.331476,4.704630,5.144554,5.671282,6.313751,7.115370,8.144346,9.514364,11.430052,14.300666,19.081136,28.636251,57.289953,372481007.007959,-57.289970,-28.636256,-19.081138,-14.300667,-11.430053,-9.514365,-8.144347,-7.115370,-6.313752,-5.671282,-5.144554,-4.704630,-4.331476,-4.010781,-3.732051,-3.487414,-3.270853,-3.077684,-2.904211,-2.747477,-2.605089,-2.475087,-2.355852,-2.246037,-2.144507,-2.050304,-1.962611,-1.880726,-1.804048,-1.732051,-1.664279,-1.600335,-1.539865,-1.482561,-1.428148,-1.376382,-1.327045,-1.279942,-1.234897,-1.191754,-1.150368,-1.110613,-1.072369,-1.035530,-1.000000,-0.965689,-0.932515,-0.900404,-0.869287,-0.839100,-0.809784,-0.781286,-0.753554,-0.726543,-0.700208,-0.674509,-0.649408,-0.624869,-0.600861,-0.577350,-0.554309,-0.531709,-0.509525,-0.487733,-0.466308,-0.445229,-0.424475,-0.404026,-0.383864,-0.363970,-0.344328,-0.324920,-0.305731,-0.286745,-0.267949,-0.249328,-0.230868,-0.212557,-0.194380,-0.176327,-0.158384,-0.140541,-0.122785,-0.105104,-0.087489,-0.069927,-0.052408,-0.034921,-0.017455};
}

template <typename T>
inline T getMax()
{
    return std::numeric_limits<T>::max();
}

template <typename T>
inline T getMin()
{
    return std::numeric_limits<T>::min();
}

inline double toDegree(const double &radian)
{
    return radian*57.2957795131;
}

inline double toRadian(const double &degree)
{
    return degree*0.0174532925;
}

inline Vector3f lerp(Vector3f start, Vector3f end, double percent)
{
    float floatPercent = (float)percent/100.0f;
    return (start + ((Vector3f(end - start))) * floatPercent);
}

inline Vector3f nlerp(Vector3f start, Vector3f end, double percent)
{
    return lerp(start,end,percent).getNormalized();
}

inline bool compare(const double &val1, const double &val2, const double &closeness)
{
    return (std::fabs(val1-val2)< closeness);
}


inline void midpoint2d(double x1, double y1, double x2, double y2, double &outX, double &outY)
{
    outX = (x1+x2)/2;
    outY = (y1+y2)/2;
}

inline Point2f midpoint2d(const Point2f &pt1, const Point2f &pt2)
{
    Point2f point;
    double outX,outY;
    midpoint2d(pt1.getX(),pt1.getY(),pt2.getX(),pt2.getY(),outX,outY);
    point.set(outX,outY);
    return point;
}

inline double clip(float n, float lower, float upper)
{
  return std::max(lower, std::min(n, upper));
}

inline Vector3f slerp(Vector3f start, Vector3f end, double percent)
{
    float floatPercent = (float)percent/100.0f;
    float dot = start.getDotProduct(end);
    clip(dot,-1.0f,1.0f);
    float theta = std::acos(dot)*floatPercent;
    Vector3f relativeVec = end - start * dot;
    relativeVec.normalize();
    return ((start*std::cos(theta)) + (relativeVec*std::sin(theta)));
}

inline Vector3f getSurfaceNormal(const Vector3f &v1, const Vector3f &v2)
{
            return Vector3f((v1.getY()*v2.getZ()) - (v1.getZ()*v2.getY()),
                    (v1.getZ()*v2.getX()) - (v1.getX()*v2.getZ()),
                    (v1.getX()*v2.getY()) - (v1.getY()*v2.getX())
                    );
}

inline std::int32_t getNormalizedDegree(const std::int32_t &degree)
{
    if (degree>359)
    {
        return degree-360;
    }
    else if (degree<0)
    {
        return 360+degree;
    }
    else return degree;

}


inline bool pointExistsInTriangle2i(const std::int32_t &srcX, const std::int32_t &srcY, const std::int32_t &x1, const std::int32_t &y1, const std::int32_t &x2, const std::int32_t &y2, const std::int32_t &x3, const std::int32_t &y3)
{
        int as_x = srcX-x1;
        int as_y = srcY-y1;
        bool s_ab = (x2-x1)*as_y-(y2-y1)*as_x > 0;
        if((x3-x1)*as_y-(y3-y1)*as_x > 0 == s_ab) return false;
        if((x3-x2)*(srcY-y2)-(y3-y2)*(srcX-x2) > 0 != s_ab) return false;
        return true;
}

inline double sind(const std::int32_t &degree)
{
   int rangle=getNormalizedDegree(degree);
   return rangle<360?constants::SIN_TABLE[rangle]:0.0;
}

inline double cosd(const std::int32_t &degree)
{
    int rangle=getNormalizedDegree(degree);
    return rangle<360?constants::COS_TABLE[rangle]:0.0;
}

inline double tand(const std::int32_t &degree)
{
    int rangle=getNormalizedDegree(degree);
    return rangle<360?constants::TAN_TABLE[rangle]:0.0;
}

inline double translateX(double degree,double radius, double xOffset)
{
    return xOffset+(cosd(degree) * radius);
}

inline double translateY(double degree,double radius, double yOffset)
{
    return yOffset+(sind(degree) * radius);
}

inline double PI()
{
    return 3.14159265359;
}

inline double PI_OVER_180()
{
    return 0.01745329251;
}

inline double distance(const double &x1, const double &y1, const double &x2, const double &y2)
{
    return std::sqrt(std::pow(x1-x2,2) + std::pow(y1-y2,2));
}

inline double distance(const double &x1, const double &y1, const double &z1, const double &x2, const double &y2, const double &z2)
{
    return std::sqrt(std::pow(x1-x2,2) + std::pow(y1-y2,2)+std::pow(z1-z2,2));
}


inline bool isPointInTriangle(const Vector3f &point, const Vector3f &trianglePointA, const Vector3f &trianglePointB, const Vector3f &trianglePointC)
{

    Vector3f P=point;
    Vector3f A=trianglePointA;
    Vector3f B=trianglePointB;
    Vector3f C=trianglePointC;

    // Compute vectors
    Vector3f v0 = C - A;
    Vector3f v1 = B - A;
    Vector3f v2 = P - A;

    // Compute dot products
    double dot00 = (v0.getDotProduct(v0));
    double dot01 = (v0.getDotProduct(v1));
    double dot02 = (v0.getDotProduct(v2));
    double dot11 = (v1.getDotProduct(v1));
    double dot12 = (v1.getDotProduct(v2));

    // Compute barycentric coordinates
    double invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    double u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    double v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    // Check if point is in triangle
    return ((u >= 0) && (v >= 0) && (u + v < 1));
}

inline bool isPointInTriangle(double px, double py, double pz,
                                  double tp1x, double tp1y, double tp1z,
                                  double tp2x, double tp2y, double tp2z,
                                  double tp3x, double tp3y, double tp3z)
{
    Vector3f A,B,C,P;
    A.set(tp1x,tp1y,tp1z);
    B.set(tp2x,tp2y,tp2z);
    C.set(tp3x,tp3y,tp3z);
    P.set(px,py,pz);
    return isPointInTriangle(P,A,B,C);
}
inline size_t getQuadrent(const double &degree)
{
    if (degree>=0 && degree<=90)
    {
        return 0;
    }
    else if (degree>90 && degree<=180)
    {
        return 1;
    }
    else if (degree>180 && degree<=270)
    {
        return 2;
    }
    else return 3;

}

inline size_t getQuadrent(double x, double y,double originX, double originY)
{
    if (x > originX && y > originX)return 0;
    else if (x < originX && y > originX)return 1;
    else if (x < originX && y < originX)return 2;
    else if (x > originX && y < originX)return 3;
    else return 0;
}

inline int64_t roundUp(int64_t numToRound, int64_t multiple)
{
     if(multiple == 0)
     {
      return numToRound;
     }

     int64_t remainder = numToRound % multiple;
     if (remainder == 0)
      return numToRound;
     return numToRound + multiple - remainder;
}

inline double sinr(const double &radian)
{
    return std::sin(radian);
}

inline double cosr(const double &radian)
{
    return std::cos(radian);
}

inline double tanr(const double &radian)
{
    return std::tan(radian);
}

inline double PI_TIMES_2()
{
    return 6.28318530718;
}

inline double PI_OVER_2()
{
    return 1.57079632679;
}

inline Point<float> rotate2d(const double &x, const double &y, const double & ox, const double & oy, const int &angle)
{
    double rangle=toRadian(angle);
    return Point<float>(std::cos(rangle) * (x-ox) - std::sin(rangle) * (y-oy) + ox,std::sin(rangle) * (x-ox) + std::cos(rangle) * (y-oy) + oy);
}

inline double getAngle(const double &x1, const double &y1, const double &x2, const double &y2)
{

    double deltaY = -(y2 - y1);
    double deltaX = -(x2 - x1);
    return getNormalizedDegree(toDegree(std::atan2(deltaY, deltaX)));

//    double dx = x - (width/2);
//    // Minus to correct for coord re-mapping
//    double dy = -(y - (height/2));
//    double inRads = std::atan2(dy,dx);
//    // We need to map to coord system when 0 degree is at 3 O'clock, 270 at 12 O'clock
//    inRads= inRads<0?std::fabs(inRads):2*PI() - inRads;

}

inline double getUpdatedAngle(const double &currentAngle, const double &desiredAngle, const double &step)
{
    int currentQuadrent=getQuadrent(currentAngle);
    int desiredQuadrent=getQuadrent(desiredAngle);

    if (currentQuadrent==desiredQuadrent)
    {
        if (desiredAngle>currentAngle)
        {
            return getNormalizedDegree(currentAngle+step);
        }
        else
        {
            return getNormalizedDegree(currentAngle-step);
        }
    }

}
}}}} //namespace
#endif //_CBTEK_COMMON_MATH_MATH_UTILS
