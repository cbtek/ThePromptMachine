/*
    UIPromptMachineEditor.cpp
    
///
/// CBTek LLC ("COMPANY") CONFIDENTIAL
/// Copyright (c) 2016 CBTek, All Rights Reserved.
///
/// NOTICE:  All information contained herein is, and remains the property of COMPANY. The intellectual and technical concepts contained
/// herein are proprietary to COMPANY and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
/// from COMPANY.  Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees, managers or contractors who have executed
/// Confidentiality and Non-disclosure agreements explicitly covering such access.
///
/// The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
/// information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
/// OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
/// LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
/// TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
///

*/
//UIPromptMachineEditor.cpp generated by cbtek on 10-23-2016 at 01:33:12 PM

#include <QScrollBar>

#include "UIPromptMachineEditor.h"
#include "UIPromptMachineViewer.h"

#include "ui_UIPromptMachineEditor.h"

#include "qt_utility/inc/UIColorLabel.h"
#include "qt_utility/inc/UIUtils.hpp"

#include "utility/inc/ColorUtils.hpp"

using namespace cbtek::common::qt_utility;
using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace productivity {
namespace prompt_machine {

UIPromptMachineEditor::UIPromptMachineEditor(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UIPromptMachineEditor)
{
    m_ui->setupUi(this);    
    m_textFgColorLabel = new UIColorLabel(QColor(0,0,0));
    m_pageBgColorLabel = new UIColorLabel(QColor(255,255,255));
    m_ui->m_txtPrompt->setFont(QFont("arial",m_ui->m_sldTextSize->value()));

    onInitialize();
}

UIPromptMachineEditor::UIPromptMachineEditor(const PromptSession &session, QWidget *parent):
    QMainWindow(parent),
    m_ui(new Ui_UIPromptMachineEditor)
{
    m_ui->setupUi(this);

    onDeserializeFromSession(session);
    onInitialize();
}



UIPromptMachineEditor::~UIPromptMachineEditor()
{

}

void UIPromptMachineEditor::onDeserializeFromSession(const PromptSession &session)
{
    m_textFgColorLabel = new UIColorLabel(session.getTextForegroundColor());
    m_pageBgColorLabel = new UIColorLabel(session.getPageBackgroundColor());
    m_ui->m_txtPrompt->setPlainText(session.getText());
    m_ui->m_txtPrompt->setFont(QFont("arial",session.getTextSize()));
    m_ui->m_sldScrollSpeed->setValue(session.getInitialScrollSpeed());
    m_ui->m_sldTextSize->setValue(session.getTextSize());
    m_ui->m_spnCountDown->setValue(session.getTimeoutSeconds());
}

void UIPromptMachineEditor::onSerializeToSession(PromptSession &session)
{
    session.setPageBackgroundColor(m_pageBgColorLabel->getColor());
    session.setTextForegroundColor(m_textFgColorLabel->getColor());
    session.setInitialScrollSpeed(m_ui->m_sldScrollSpeed->value());
    session.setText(m_ui->m_txtPrompt->toPlainText());
    session.setTextSize(m_ui->m_sldTextSize->value());
    session.setTimeoutSeconds(m_ui->m_spnCountDown->value());
}


void UIPromptMachineEditor::onInitialize()
{
    m_pageBgColorLabel->setMinimumSize(32,32);
    m_textFgColorLabel->setMinimumSize(32,32);

    m_ui->m_lytMain->addWidget(m_textFgColorLabel,1,1);
    m_ui->m_lytMain->addWidget(m_pageBgColorLabel,1,0);

    onTextSizeChanged(m_ui->m_sldTextSize->value());
    onTextSpeedChanged(m_ui->m_sldScrollSpeed->value());

    connect(m_textFgColorLabel,SIGNAL(colorChanged(QColor)),this,SLOT(onTextFGColorChanged(QColor)));
    connect(m_pageBgColorLabel,SIGNAL(colorChanged(QColor)),this,SLOT(onPageBGColorChanged(QColor)));
    connect(m_ui->m_sldTextSize,SIGNAL(valueChanged(int)),this,SLOT(onTextSizeChanged(int)));
    connect(m_ui->m_sldScrollSpeed,SIGNAL(valueChanged(int)),this,SLOT(onTextSpeedChanged(int)));
    connect(m_ui->m_btnStart,SIGNAL(clicked(bool)),this,SLOT(onStart()));
    connect(m_ui->m_btnClose,SIGNAL(clicked(bool)),this,SLOT(close()));
    connect(m_ui->m_btnRandomColors,SIGNAL(clicked(bool)),this,SLOT(onRandomColors()));
}

void UIPromptMachineEditor::onTextFGColorChanged(QColor color)
{
    m_ui->m_txtPrompt->setStyleSheet("QPlainTextEdit{background: "+UIUtils::toHTMLColorRGBString(m_pageBgColorLabel->getColor())+
                                     "; color: "+UIUtils::toHTMLColorRGBString(color)+";}");
}

void UIPromptMachineEditor::onPageBGColorChanged(QColor color)
{ 
    m_ui->m_txtPrompt->setStyleSheet("QPlainTextEdit{background: "+UIUtils::toHTMLColorRGBString(color)+
                                     "; color: "+UIUtils::toHTMLColorRGBString(m_textFgColorLabel->getColor())+";}");
}


void UIPromptMachineEditor::onTextSizeChanged(int value)
{
    QTextCursor cursor = m_ui->m_txtPrompt->textCursor();
    QString text = m_ui->m_txtPrompt->toPlainText();
    m_ui->m_txtPrompt->setFont(QFont("arial",value));
    m_ui->m_txtPrompt->setPlainText(text);
    m_ui->m_txtPrompt->setTextCursor(cursor);
    m_ui->m_lblTextSize->setText("Text Size ("+QString::number(value)+"): ");
}

void UIPromptMachineEditor::onStart()
{
    PromptSession session;
    onSerializeToSession(session);
    UIPromptMachineViewer * viewer = new UIPromptMachineViewer(session);
    viewer->show();
}

void UIPromptMachineEditor::onTextBegin()
{

}

void UIPromptMachineEditor::onTextEnd()
{

}

void UIPromptMachineEditor::onTextSpeedChanged(int value)
{
    m_ui->m_lblTextSpeed->setText("Text Speed ("+QString::number(value)+"):");
}

void UIPromptMachineEditor::onRandomColors()
{
    if (m_rnd.next(100)>50)
    {
        this->m_pageBgColorLabel->onSetColor(UIUtils::toQColor(ColorFactory::createRandomLightColor()));
        this->m_textFgColorLabel->onSetColor(UIUtils::toQColor(ColorFactory::createRandomDarkColor()));
    }
    else
    {
        this->m_textFgColorLabel->onSetColor(UIUtils::toQColor(ColorFactory::createRandomLightColor()));
        this->m_pageBgColorLabel->onSetColor(UIUtils::toQColor(ColorFactory::createRandomDarkColor()));
    }
}


}}}}//namespace

